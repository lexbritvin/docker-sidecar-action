name: Docker Workflow Example

on:
  push:
    branches: [ main ]

jobs:
  client-ssh-key:
    name: Generate SSH Key
    runs-on: ubuntu-latest
    outputs:
      private-key: ${{ steps.generate-key.outputs.private-key }}
      public-key: ${{ steps.generate-key.outputs.public-key }}
    steps:
      - name: Generate ED25519 SSH key pair
        id: generate-key
        run: |
          ssh-keygen -t ed25519 -N "" -f ./id_ed25519

          echo "Export private ssh key"
          {
            echo "private-key<<EOF"
            cat ./id_ed25519
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "public-key=$(cat ./id_ed25519.pub)" >> $GITHUB_OUTPUT
  
  linux-sidecar:
    name: Linux Docker Sidecar
    needs: [client-ssh-key]
    runs-on: ubuntu-latest
    steps:
      - name: Run Linux Docker sidecar
        uses: lexbritvin/docker-sidecar-action/run-sidecar@main
        with:
          ssh-server-authorized-keys: ${{ needs.client-ssh-key.outputs.public-key }}
          use-bore: 'true'

      - name: âš¡ Wait for related jobs
        uses: lexbritvin/wait-action@v1
        with:
          condition-type: 'job'
          job-name: '[wait] '
          timeout-seconds: 1800
          poll-interval-seconds: 30

  windows-job:
    name: "[wait] Windows Job"
    needs: [client-ssh-key]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up the Docker sidecar environment
      - name: Set up Remote Docker
        id: docker-setup
        uses: lexbritvin/docker-sidecar-action/setup-remote-docker@main
        with:
          private-key: ${{ needs.client-ssh-key.outputs.private-key }}
          use-remote-share: 'true'

      - name: Run Docker container with volume mount
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export MSYS_NO_PATHCONV=1
          fi
          # Create a test file in the workspace
          echo "Hello from the host" > test-file.txt

          # Mount the workspace and access the file from the container
          docker run --rm -v "/mnt$(pwd):/workspace" alpine:latest sh -c "cat /workspace/test-file.txt && echo 'Hello from the container' >> /workspace/test-file.txt"

          # Verify the file was modified
          cat test-file.txt | grep "Hello from the container"
          cat test-file.txt

  macos-job:
    name: "[wait] Macos Job"
    needs: [ client-ssh-key ]
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up the Docker sidecar environment
      - name: Set up Remote Docker
        id: docker-setup
        uses: lexbritvin/docker-sidecar-action/setup-remote-docker@main
        with:
          private-key: ${{ needs.client-ssh-key.outputs.private-key }}
          use-remote-share: 'true'

      - name: Run Docker container with volume mount
        shell: bash
        run: |
          PATH_PREFIX=""
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export MSYS_NO_PATHCONV=1
            PATH_PREFIX="/mnt"
          fi
          # Create a test file in the workspace
          echo "Hello from the host" > test-file.txt

          # Mount the workspace and access the file from the container
          docker run --rm -v "$PATH_PREFIX$(pwd):/workspace" alpine:latest sh -c "cat /workspace/test-file.txt && echo 'Hello from the container' >> /workspace/test-file.txt"

          # Verify the file was modified
          cat test-file.txt | grep "Hello from the container"
          cat test-file.txt
