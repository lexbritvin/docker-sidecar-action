name: 'Set up Remote Docker'
description: 'Set up a Linux remote Docker for Windows and macOS runners with optional SMB share support'

inputs:
  docker-connection-artifact-name:
    description: 'Name of the Docker connection artifacts to download'
    default: 'docker-conn-details'
    required: false
  private-key:
    description: 'SSH private key content for sidecar ssh authentication'
    required: false
    default: ''
  private-key-path:
    description: 'Path to the SSH private key file for sidecar ssh authentication'
    required: false
    default: ''
  use-remote-share:
    description: 'Enable SMB share mounting for file sharing between local and remote environments'
    required: false
    default: 'false'
  working-directory:
    description: 'Working directory path to be used for smb share configuration.'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    # ===================================================================
    # STEP 1: Docker Client Installation (macOS only)
    # ===================================================================
    - name: Install Docker client on macOS
      if: runner.os == 'macOS'
      shell: bash
      run: |
        echo "::group::üê≥ Installing Docker client on macOS"
        
        # Check if Docker is already installed
        if command -v docker >/dev/null 2>&1; then
          echo "‚úÖ Docker client is already installed"
          echo "üìã Current version: $(docker --version)"
        else
          echo "üì¶ Installing Docker client via Homebrew..."
        
          # Verify Homebrew is available
          if ! command -v brew >/dev/null 2>&1; then
            echo "‚ùå Homebrew not found. This action requires Homebrew for Docker installation on macOS."
            echo "Please install Homebrew first: https://brew.sh/"
            exit 1
          fi
        
          # Install Docker via Homebrew
          if brew install --cask docker; then
            echo "‚úÖ Docker client installed successfully"
            echo "üìã Installed version: $(docker --version)"
          else
            echo "‚ùå Failed to install Docker client via Homebrew"
            exit 1
          fi
        fi
        
        echo "::endgroup::"

    # ===================================================================
    # STEP 1.1: Docker Client Installation (Windows only)
    # ===================================================================
    - name: Install Docker client on Windows
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "::group::Installing Docker client on Windows"
        
        # Check if Docker is already installed
        try {
          $dockerVersion = docker --version 2>$null
          if ($dockerVersion) {
            Write-Host "Docker client is already installed"
            Write-Host "Current version: $dockerVersion"
            Write-Host "::endgroup::"
            return
          }
        }
        catch {
          # Docker not found, continue with installation
        }
        
        Write-Host "Installing Docker client via winget..."
        
        # Check if winget is available
        try {
          $wingetVersion = winget --version 2>$null
          Write-Host "Winget version: $wingetVersion"
        }
        catch {
          Write-Host "Winget is not available on this system"
          Write-Host "::endgroup::"
          exit 1
        }
        
        # Search for Docker package first
        Write-Host "Searching for Docker CLI package..."
        try {
          winget search Docker.DockerCLI
        }
        catch {
          Write-Host "Could not search for Docker package: $_"
        }
        
        # Attempt installation with detailed error output
        Write-Host "Attempting to install Docker CLI..."
        try {
          $result = winget install --id Docker.DockerCLI --silent --accept-package-agreements --accept-source-agreements 2>&1
          Write-Host "Installation output: $result"
        
          if ($LASTEXITCODE -ne 0) {
            throw "Winget installation failed with exit code: $LASTEXITCODE"
          }
        
          # Refresh environment variables
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
        
          $dockerVersion = docker --version
          Write-Host "Docker client installed successfully" 
          Write-Host "Installed version: $dockerVersion"
        }
        catch {
          Write-Host "Failed to install Docker client via winget"
          Write-Host "Error details: $_"
          Write-Host "Exit code: $LASTEXITCODE"
          Write-Host "::endgroup::"
          exit 1
        }
        
        Write-Host "::endgroup::"

    # ===================================================================
    # STEP 2: SMB Share Configuration (Optional)
    # ===================================================================
    - name: Configure SMB share parameters
      shell: bash
      id: smb-share
      if: inputs.use-remote-share == 'true'
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "::group::üìÅ Configuring SMB share parameters"
        
        # Get current working directory and prepare paths
        LOCAL_PATH=$(pwd)
        MOUNT_PATH=$(pwd)
        SMB_USER=$(whoami)
        
        # Windows-specific path handling
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "ü™ü Windows environment detected - adjusting paths"
          LOCAL_PATH=$(cygpath -w "$LOCAL_PATH" 2>/dev/null || echo "$LOCAL_PATH")
          MOUNT_PATH="/mnt$MOUNT_PATH"
          SMB_USER="smbuser"
        fi
        
        # Generate random port and share name for security
        SMB_PORT=$((49152 + RANDOM % 16384))  # Use ephemeral port range
        SHARE_NAME="workspace_share_$(date +%s)_$RANDOM"  # Timestamp + random for uniqueness
        SHARE_PASS="SecurePass_$(date +%s)_$RANDOM!"  # Generate secure password
        
        # Export configuration to outputs
        {
          echo "smb-port=$SMB_PORT"
          echo "smb-remote-fwd=$SMB_PORT:localhost:445"
          echo "local-path=$LOCAL_PATH"
          echo "mount-path=$MOUNT_PATH"
          echo "share-name=$SHARE_NAME"
          echo "share-user=$SMB_USER"
          echo "share-pass=$SHARE_PASS"
        } >> $GITHUB_OUTPUT
        
        echo "üìã SMB Configuration:"
        echo "  ‚Ä¢ Local path: $LOCAL_PATH"
        echo "  ‚Ä¢ Mount path: $MOUNT_PATH"
        echo "  ‚Ä¢ Share name: $SHARE_NAME"
        echo "  ‚Ä¢ SMB port: $SMB_PORT"
        echo "  ‚Ä¢ SMB user: $SMB_USER"
        
        echo "::endgroup::"

    # Setup local SMB share
    - name: Setup local SMB share
      uses: lexbritvin/smb-share-action@v1
      if: inputs.use-remote-share == 'true'
      with:
        path: ${{ steps.smb-share.outputs.local-path }}
        share-name: ${{ steps.smb-share.outputs.share-name }}
        share-user: ${{ steps.smb-share.outputs.share-user }}
        share-pass: ${{ steps.smb-share.outputs.share-pass }}

    # ===================================================================
    # STEP 3: Wait for Docker Sidecar and Download Artifacts
    # ===================================================================
    - name: Wait for Docker sidecar to start
      uses: lexbritvin/wait-action@v1
      with:
        condition-type: 'artifact'
        artifact-name: ${{ inputs.docker-connection-artifact-name }}
        timeout-seconds: 300

    - name: Download Docker connection artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.docker-connection-artifact-name }}
        path: ${{ inputs.docker-connection-artifact-name }}

    # ===================================================================
    # STEP 4: Load and Validate Connection Details
    # ===================================================================
    - name: Load and validate connection details
      id: connection
      shell: bash
      env:
        INPUT_DOCKER_ARTIFACT: ${{ inputs.docker-connection-artifact-name }}
      run: |
        echo "::group::üìã Loading connection details"

        # Define required files
        DOCKER_CONFIG_FILE="$INPUT_DOCKER_ARTIFACT/docker-connection-details.env"
        SSH_CONFIG_FILE="$INPUT_DOCKER_ARTIFACT/ssh-connection-details.env"
        KNOWN_HOSTS_FILE="$INPUT_DOCKER_ARTIFACT/ssh-known-hosts.txt"

        # Validate required files exist
        echo "üîç Validating required configuration files..."
        
        if [[ ! -f "$DOCKER_CONFIG_FILE" ]]; then
          echo "‚ùå Docker connection details not found: $DOCKER_CONFIG_FILE"
          exit 1
        fi
        echo "‚úÖ Docker configuration found"

        if [[ ! -f "$SSH_CONFIG_FILE" ]]; then
          echo "‚ùå SSH connection details not found: $SSH_CONFIG_FILE"
          exit 1
        fi
        echo "‚úÖ SSH configuration found"

        # Load configuration files
        echo "üì• Loading Docker connection configuration..."
        set -a  # Automatically export all variables
        source "$DOCKER_CONFIG_FILE"
        set +a
        
        echo "üì• Loading SSH connection configuration..."
        set -a
        source "$SSH_CONFIG_FILE"
        set +a

        # Process known hosts
        if [[ -f "$KNOWN_HOSTS_FILE" ]]; then
          KNOWN_HOSTS_CONTENT=$(cat "$KNOWN_HOSTS_FILE")
          if [[ -n "$KNOWN_HOSTS_CONTENT" ]]; then
            echo "extracted-known-hosts<<KNOWN_HOSTS_OUTPUT_EOF" >> $GITHUB_OUTPUT
            echo "$KNOWN_HOSTS_CONTENT" >> $GITHUB_OUTPUT
            echo "KNOWN_HOSTS_OUTPUT_EOF" >> $GITHUB_OUTPUT
            echo "‚úÖ Known hosts loaded successfully"
          else
            echo "extracted-known-hosts=" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è ssh-known-hosts.txt is empty"
          fi
        else
          echo "extracted-known-hosts=" >> $GITHUB_OUTPUT
          echo "‚ö†Ô∏è ssh-known-hosts.txt not found - SSH host verification may fail"
        fi

        # Validate required variables
        echo "üîç Validating required variables..."
        required_vars=("SSH_HOST" "SSH_PORT" "SSH_USER" "DOCKER_HOST" "DOCKER_PORT")
        for var in "${required_vars[@]}"; do
          if [[ -z "${!var}" ]]; then
            echo "‚ùå Required variable $var is not set"
            exit 1
          fi
        done
        echo "‚úÖ All required variables are present"

        # Export SSH connection details
        {
          echo "ssh-host=$SSH_HOST"
          echo "ssh-port=$SSH_PORT"
          echo "ssh-user=$SSH_USER"
        } >> $GITHUB_OUTPUT
        
        # Build SSH jump host string
        SSH_JUMP_STRING=""
        if [[ -n "$SSH_JUMP_HOST" ]]; then
          SSH_JUMP_STRING="$SSH_JUMP_HOST"
          [[ -n "$SSH_JUMP_USER" ]] && SSH_JUMP_STRING="${SSH_JUMP_USER}@${SSH_JUMP_STRING}"
          [[ -n "$SSH_JUMP_PORT" ]] && SSH_JUMP_STRING="${SSH_JUMP_STRING}:${SSH_JUMP_PORT}"
          echo "üîó Jump host configured: $SSH_JUMP_STRING"
        fi
        echo "ssh-jump-string=$SSH_JUMP_STRING" >> $GITHUB_OUTPUT

        # Export Docker configuration to environment
        {
          echo "DOCKER_HOST=$DOCKER_HOST"
          echo "DOCKER_TLS_VERIFY=${DOCKER_TLS_VERIFY:-0}"
        } >> $GITHUB_ENV

        # Export Docker connection details
        DOCKER_ENDPOINT="${DOCKER_HOST#tcp://}"  # Remove tcp:// prefix
        {
          echo "docker-endpoint=$DOCKER_ENDPOINT"
          echo "docker-port=$DOCKER_PORT"
        } >> $GITHUB_OUTPUT

        # Log configuration summary
        echo "üìã Connection Summary:"
        echo "  ‚Ä¢ Docker host: $DOCKER_HOST"
        echo "  ‚Ä¢ TLS verification: ${DOCKER_TLS_VERIFY:-disabled}"
        echo "  ‚Ä¢ SSH target: $SSH_USER@$SSH_HOST:$SSH_PORT"
        if [[ -n "$SSH_JUMP_STRING" ]]; then
          echo "  ‚Ä¢ SSH jump host: $SSH_JUMP_STRING"
        fi

        echo "::endgroup::"

    # ===================================================================
    # STEP 5: Setup Docker TLS Certificates (if enabled)
    # ===================================================================
    - name: Setup Docker TLS certificates
      shell: bash
      env:
        INPUT_DOCKER_ARTIFACT: ${{ inputs.docker-connection-artifact-name }}
      run: |
        echo "::group::üîê Setting up Docker TLS certificates"
        
        # Check if TLS is enabled
        if [[ "${DOCKER_TLS_VERIFY}" != "1" ]]; then
          echo "üîì TLS verification disabled - skipping certificate setup"
          echo "::endgroup::"
          exit 0
        fi
        
        echo "üîí TLS verification enabled - setting up certificates"
        
        TLS_CERT_DIR="$INPUT_DOCKER_ARTIFACT/tls-certificates"
        
        # Validate TLS certificates directory exists
        if [[ ! -d "$TLS_CERT_DIR" ]]; then
          echo "‚ùå TLS certificates directory not found: $TLS_CERT_DIR"
          exit 1
        fi
        
        # Create local certificates directory
        LOCAL_CERT_DIR="docker-certs"
        mkdir -p "$LOCAL_CERT_DIR"
        
        # Copy certificates
        echo "üì• Copying TLS certificates..."
        if ! cp "$TLS_CERT_DIR"/* "$LOCAL_CERT_DIR"/; then
          echo "‚ùå Failed to copy TLS certificates"
          exit 1
        fi
        
        # Set certificate path with OS compatibility
        cert_path="${PWD}/$LOCAL_CERT_DIR"
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          # Convert Unix path to Windows path format for Git Bash/MSYS2
          cert_path=$(cygpath -w "$cert_path" 2>/dev/null || echo "$cert_path")
        fi
        
        echo "DOCKER_CERT_PATH=$cert_path" >> $GITHUB_ENV
        
        # Verify required certificate files exist
        echo "üîç Validating certificate files..."
        required_certs=("ca.pem" "cert.pem" "key.pem")
        for cert_file in "${required_certs[@]}"; do
          cert_path_full="$LOCAL_CERT_DIR/$cert_file"
          if [[ ! -f "$cert_path_full" ]]; then
            echo "‚ùå Required certificate file missing: $cert_file"
            exit 1
          fi
          echo "‚úÖ $cert_file found"
        done
        
        echo "üîê Docker TLS certificates configured successfully"
        echo "üìÅ Certificate path: $cert_path"
        
        echo "::endgroup::"

    # ===================================================================
    # STEP: Save Docker Environment Variables to System Profile
    # ===================================================================
    - name: Save Docker environment variables to system profile
      shell: bash
      run: |
        echo "üíæ Saving Docker environment variables to system profile"
        
        # Validate DOCKER_HOST is set
        if [[ -z "${DOCKER_HOST:-}" ]]; then
          echo "‚ùå DOCKER_HOST not set"
          exit 1
        fi
        
        echo "üìã Saving: DOCKER_HOST=${DOCKER_HOST}"
        
        case "$RUNNER_OS" in
          "Linux"|"macOS")
            # Remove existing Docker entries
            if [[ "$RUNNER_OS" == "macOS" ]]; then
              sudo sed -i '' '/export DOCKER_HOST/d' /etc/profile 2>/dev/null || true
              sudo sed -i '' '/export DOCKER_TLS_VERIFY/d' /etc/profile 2>/dev/null || true
              sudo sed -i '' '/export DOCKER_CERT_PATH/d' /etc/profile 2>/dev/null || true
            else
              sudo sed -i '/export DOCKER_HOST/d' /etc/profile 2>/dev/null || true
              sudo sed -i '/export DOCKER_TLS_VERIFY/d' /etc/profile 2>/dev/null || true
              sudo sed -i '/export DOCKER_CERT_PATH/d' /etc/profile 2>/dev/null || true
            fi
        
            # Add Docker environment variables
            echo "export DOCKER_HOST=\"${DOCKER_HOST}\"" | sudo tee -a /etc/profile
            echo "export DOCKER_TLS_VERIFY=\"${DOCKER_TLS_VERIFY:-0}\"" | sudo tee -a /etc/profile
            [[ -n "${DOCKER_CERT_PATH:-}" ]] && echo "export DOCKER_CERT_PATH=\"${DOCKER_CERT_PATH}\"" | sudo tee -a /etc/profile
        
            echo "‚úÖ Saved to /etc/profile"
            echo "To use: source /etc/profile"
            ;;
        
          "Windows")
            # Set system environment variables
            setx DOCKER_HOST "${DOCKER_HOST}" //M 2>/dev/null
            setx DOCKER_TLS_VERIFY "${DOCKER_TLS_VERIFY:-0}" //M 2>/dev/null
            [[ -n "${DOCKER_CERT_PATH:-}" ]] && setx DOCKER_CERT_PATH "${DOCKER_CERT_PATH}" //M 2>/dev/null
        
            echo "‚úÖ Saved to Windows system environment"
            echo "To use: Open new terminal session"
            ;;
        
          *)
            echo "‚ùå Unsupported OS: $RUNNER_OS"
            exit 1
            ;;
        esac

    # ===================================================================
    # STEP 6: Establish SSH Tunnels
    # ===================================================================
    - name: Establish SSH tunnels for Docker and SMB
      uses: lexbritvin/ssh-action@v1
      with:
        host: ${{ steps.connection.outputs.ssh-host }}
        port: ${{ steps.connection.outputs.ssh-port }}
        username: ${{ steps.connection.outputs.ssh-user }}
        private-key: ${{ inputs.private-key }}
        private-key-path: ${{ inputs.private-key-path }}
        jump-hosts: ${{ steps.connection.outputs.ssh-jump-string }}
        local-forwards: ${{ steps.connection.outputs.docker-port }}:${{ steps.connection.outputs.docker-endpoint }}
        remote-forwards: ${{ steps.smb-share.outputs.smb-remote-fwd }}
        known-hosts: |
          ${{ steps.connection.outputs.extracted-known-hosts }}

    # ===================================================================
    # STEP 7: Configure Remote SMB Mount (if enabled)
    # ===================================================================
    - name: Configure SMB mount on remote host
      uses: lexbritvin/ssh-action@v1
      if: inputs.use-remote-share == 'true'
      with:
        host: ${{ steps.connection.outputs.ssh-host }}
        port: ${{ steps.connection.outputs.ssh-port }}
        username: ${{ steps.connection.outputs.ssh-user }}
        private-key: ${{ inputs.private-key }}
        private-key-path: ${{ inputs.private-key-path }}
        jump-hosts: ${{ steps.connection.outputs.ssh-jump-string }}
        known-hosts: |
          ${{ steps.connection.outputs.extracted-known-hosts }}
        command: |
          set -e
          
          echo "Setting up SMB mount on remote Linux host"
          
          MOUNT_PATH='${{ steps.smb-share.outputs.mount-path }}'
          SHARE_NAME='${{ steps.smb-share.outputs.share-name }}'
          SHARE_USER='${{ steps.smb-share.outputs.share-user }}'
          SHARE_PASS='${{ steps.smb-share.outputs.share-pass }}'
          SMB_PORT='${{ steps.smb-share.outputs.smb-port }}'
          
          echo "Creating mount point: $MOUNT_PATH"
          sudo mkdir -p "$MOUNT_PATH"

          echo "Creating CIFS credentials file"
          sudo tee /etc/cifs-credentials > /dev/null << EOF
          username=$SHARE_USER
          password=$SHARE_PASS
          domain=WORKGROUP
          EOF
          sudo chmod 600 /etc/cifs-credentials

          echo "Mounting SMB share via SSH tunnel"
          if sudo mount -t cifs "//localhost/$SHARE_NAME" "$MOUNT_PATH" \
            -o credentials=/etc/cifs-credentials,port=$SMB_PORT,vers=3.0,iocharset=utf8,file_mode=0777,dir_mode=0777,nobrl; then
            echo "SMB mount successful"
          else
            echo "SMB mount failed"
            exit 1
          fi

          echo "Verifying mount:"
          df -h | grep "$MOUNT_PATH" || echo "Mount not visible in df output"

          echo "Testing file operations"
          test_file="$MOUNT_PATH/mount_test_$(date +%s).txt"
          if echo "SMB mount test from remote Linux host" | sudo tee "$test_file" > /dev/null; then
            echo "Write test successful"
            if sudo cat "$test_file" > /dev/null; then
              echo "Read test successful"
              sudo rm "$test_file"
              echo "Delete test successful"
            else
              echo "Read test failed"
              exit 1
            fi
          else
            echo "Write test failed"
            exit 1
          fi

          echo "SMB share configuration completed successfully"

        # Cleanup SMB mount after use
        post-command: |
          echo "Cleaning up SMB mount"
          if sudo umount '${{ steps.smb-share.outputs.mount-path }}' 2>/dev/null; then
            echo "SMB mount unmounted successfully"
          else
            echo "Failed to unmount SMB share (may already be unmounted)"
          fi

    # ===================================================================
    # STEP 8: Verify Docker Connection
    # ===================================================================
    - name: Verify Docker connection
      shell: bash
      run: |
        echo "::group::üîç Verifying Docker connection"
        
        # Display current Docker environment (without sensitive data)
        echo "üìã Docker Environment Configuration:"
        echo "  ‚Ä¢ DOCKER_HOST: ${DOCKER_HOST:-‚ùå not set}"
        echo "  ‚Ä¢ DOCKER_TLS_VERIFY: ${DOCKER_TLS_VERIFY:-‚ùå not set}"
        echo "  ‚Ä¢ DOCKER_CERT_PATH: ${DOCKER_CERT_PATH:-‚ùå not set}"
        
        # Test Docker daemon connectivity
        echo "üîå Testing Docker daemon connectivity..."
        
        # First, test basic connectivity
        TMP_OUT="$RUNNER_TEMP/docker_version.out"
        if docker version > "$TMP_OUT" 2>&1; then
          echo "‚úÖ Docker connection established successfully"
        
          # Get detailed version information
          echo "üìã Docker Version Information:"
          docker version --format 'Client: {{.Client.Version}}, Server: {{.Server.Version}}' 2>/dev/null || {
            echo "Client: $(docker version --format '{{.Client.Version}}' 2>/dev/null || echo 'Unknown')"
            echo "Server: $(docker version --format '{{.Server.Version}}' 2>/dev/null || echo 'Unknown')"
          }
        
          # Test basic Docker functionality
          echo "üß™ Testing basic Docker functionality..."
          if docker info > /dev/null 2>&1; then
            echo "‚úÖ Docker info command successful"
        
            # Show basic system info
            echo "üìä Docker System Info:"
            docker info --format 'Containers: {{.Containers}}, Images: {{.Images}}, Server Version: {{.ServerVersion}}' 2>/dev/null || {
              echo "Unable to retrieve detailed system info"
            }
          else
            echo "‚ö†Ô∏è Docker info command failed, but connection is established"
          fi
        
        else
          echo "‚ùå Failed to connect to Docker daemon"
          cat "$TMP_OUT"
          echo "Please verify:"
          echo "  ‚Ä¢ Docker sidecar is running and accessible"
          echo "  ‚Ä¢ SSH tunnel is properly established"
          echo "  ‚Ä¢ Docker daemon is listening on the expected port"
          echo "  ‚Ä¢ TLS certificates are valid (if TLS is enabled)"
        
          # Additional debugging information
          echo "üîß Debug Information:"
          echo "  ‚Ä¢ DOCKER_HOST resolves to: ${DOCKER_HOST:-N/A}"
          if [[ "${DOCKER_TLS_VERIFY}" == "1" ]]; then
            echo "  ‚Ä¢ TLS verification enabled - checking certificates:"
            if [[ -n "${DOCKER_CERT_PATH}" && -d "${DOCKER_CERT_PATH}" ]]; then
              ls -la "${DOCKER_CERT_PATH}/" 2>/dev/null || echo "    Cannot list certificate directory"
            else
              echo "    Certificate path not set or invalid"
            fi
          fi
        
          exit 1
        fi
        
        echo "::endgroup::"
        echo "üéâ Remote Docker setup completed successfully!"

    # ===================================================================
    # STEP 9: Cleanup Temporary Files
    # ===================================================================
    - name: Cleanup temporary files
      shell: bash
      env:
        INPUT_DOCKER_ARTIFACT: ${{ inputs.docker-connection-artifact-name }}
      run: |
        echo "üßπ Cleaning up temporary files"
        
        # Remove downloaded artifacts (preserve docker-certs for ongoing use)
        if [[ -d "$INPUT_DOCKER_ARTIFACT" ]]; then
          rm -rf "$INPUT_DOCKER_ARTIFACT"
          echo "‚úÖ Removed artifact directory: $INPUT_DOCKER_ARTIFACT"
        fi
        
        # Clean up CIFS credentials on the runner (if they exist locally)
        if [[ -f "/etc/cifs-credentials" ]]; then
          sudo rm -f "/etc/cifs-credentials" 2>/dev/null || echo "‚ö†Ô∏è Could not remove CIFS credentials file"
        fi
        
        echo "‚úÖ Temporary files cleanup completed"